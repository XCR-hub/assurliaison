generator client {
  provider   = "prisma-client-js"
  engineType = "wasm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  BUYER
  SELLER
  ADMIN
}

enum Plan {
  MONTHLY_199
  YEAR_1500
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum AlertFrequency {
  INSTANT
  DAILY
  WEEKLY
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  name              String?
  password          String?
  role              Role          @default(GUEST)
  stripeCustomerId  String?
  subscriptions     Subscription[]
  listings          Listing[]     @relation("ListingSeller")
  conversationsAsBuyer  Conversation[] @relation("ConversationBuyer")
  conversationsAsSeller Conversation[] @relation("ConversationSeller")
  messages          Message[]
  savedSearches     SavedSearch[]
  reports           Report[]      @relation("UserReports")
  auditLogs         AuditLog[]    @relation("AuditUser")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Subscription {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  plan           Plan
  status         String
  stripeSubId    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Listing {
  id                    String         @id @default(uuid())
  seller                User           @relation("ListingSeller", fields: [sellerId], references: [id])
  sellerId              String
  status                ListingStatus  @default(PENDING)
  title                 String
  slug                  String         @unique
  region                String?
  lines                 String[]
  portfolioType         String?
  nbClients             Int?
  annualCommissionsEUR  Float?
  mainCarriers          String[]
  growth3yPct           Float?
  askingPriceEUR        Float?
  priceMultiple         Float?
  transitionTerms       String?
  anonymized            Boolean        @default(true)
  shortDesc             String?
  longDesc              String?
  conversations         Conversation[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model Conversation {
  id           String   @id @default(uuid())
  buyer        User     @relation("ConversationBuyer", fields: [buyerId], references: [id])
  buyerId      String
  seller       User     @relation("ConversationSeller", fields: [sellerId], references: [id])
  sellerId     String
  listing      Listing  @relation(fields: [listingId], references: [id])
  listingId    String
  messages     Message[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Message {
  id             String   @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User     @relation(fields: [senderId], references: [id])
  senderId       String
  body           String?
  attachmentUrl  String?
  readAt         DateTime?
  createdAt      DateTime @default(now())
}

model SavedSearch {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  name         String
  filtersJson  Json
  frequency    AlertFrequency @default(INSTANT)
  createdAt    DateTime       @default(now())
}

model Report {
  id         String   @id @default(uuid())
  reporter   User     @relation("UserReports", fields: [reporterId], references: [id])
  reporterId String
  targetType String
  targetId   String
  reason     String
  createdAt  DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  actor     User     @relation("AuditUser", fields: [actorId], references: [id])
  actorId   String
  action    String
  meta      Json
  createdAt DateTime @default(now())
}